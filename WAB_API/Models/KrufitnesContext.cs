// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WAB_API.Models
{
    public partial class KrufitnesContext : DbContext
    {
        public KrufitnesContext()
        {
        }

        public KrufitnesContext(DbContextOptions<KrufitnesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TableBuy> TableBuy { get; set; }
        public virtual DbSet<TableCost> TableCost { get; set; }
        public virtual DbSet<TableDispose> TableDispose { get; set; }
        public virtual DbSet<TableEq> TableEq { get; set; }
        public virtual DbSet<TableProGrame> TableProGrame { get; set; }
        public virtual DbSet<TableProMoTion> TableProMoTion { get; set; }
        public virtual DbSet<TableSup> TableSup { get; set; }
        public virtual DbSet<TableTitleName> TableTitleName { get; set; }
        public virtual DbSet<TableTrainner> TableTrainner { get; set; }
        public virtual DbSet<TableTypePg> TableTypePg { get; set; }
        public virtual DbSet<TableTypeUser> TableTypeUser { get; set; }
        public virtual DbSet<TableUser> TableUser { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-A2CIN91\\SQLEXPRESS;Initial Catalog=KruFitNes;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<TableBuy>(entity =>
            {
                entity.HasKey(e => e.IdBuy);

                entity.ToTable("Table_Buy");

                entity.Property(e => e.IdBuy).HasColumnName("ID_Buy");

                entity.Property(e => e.ButStatus).HasColumnName("But_Status");

                entity.Property(e => e.BuyCost).HasColumnName("Buy_Cost");

                entity.Property(e => e.BuyPro).HasColumnName("Buy_Pro");

                entity.Property(e => e.BuyStart)
                    .HasColumnName("Buy_Start")
                    .HasColumnType("date");

                entity.Property(e => e.BuyStop)
                    .HasColumnName("Buy_Stop")
                    .HasColumnType("date");

                entity.Property(e => e.BuyUser).HasColumnName("Buy_User");

                entity.HasOne(d => d.BuyCostNavigation)
                    .WithMany(p => p.TableBuy)
                    .HasForeignKey(d => d.BuyCost)
                    .HasConstraintName("FK_Table_Buy_Table_Cost");

                entity.HasOne(d => d.BuyProNavigation)
                    .WithMany(p => p.TableBuy)
                    .HasForeignKey(d => d.BuyPro)
                    .HasConstraintName("FK_Table_Buy_Table_ProMoTion");

                entity.HasOne(d => d.BuyUserNavigation)
                    .WithMany(p => p.TableBuy)
                    .HasForeignKey(d => d.BuyUser)
                    .HasConstraintName("FK_Table_Buy_Table_User");
            });

            modelBuilder.Entity<TableCost>(entity =>
            {
                entity.HasKey(e => e.IdCost);

                entity.ToTable("Table_Cost");

                entity.Property(e => e.IdCost).HasColumnName("ID_Cost");

                entity.Property(e => e.CostName)
                    .HasColumnName("Cost_Name")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CostPrice)
                    .HasColumnName("Cost_Price")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TableDispose>(entity =>
            {
                entity.HasKey(e => e.DisAtno);

                entity.ToTable("Table_Dispose");

                entity.Property(e => e.DisAtno).HasColumnName("DIS_ATNO");

                entity.Property(e => e.CeAtno).HasColumnName("CE_ATNO");

                entity.Property(e => e.DisDateOut)
                    .HasColumnName("DIS_DateOUT")
                    .HasColumnType("datetime");

                entity.Property(e => e.DisStatus).HasColumnName("DIS_Status");

                entity.HasOne(d => d.CeAtnoNavigation)
                    .WithMany(p => p.TableDispose)
                    .HasForeignKey(d => d.CeAtno)
                    .HasConstraintName("FK_Table_Dispose_Table_EQ");
            });

            modelBuilder.Entity<TableEq>(entity =>
            {
                entity.HasKey(e => e.CeAtno);

                entity.ToTable("Table_EQ");

                entity.Property(e => e.CeAtno).HasColumnName("CE_ATNO");

                entity.Property(e => e.CeName)
                    .HasColumnName("CE_Name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CeNo)
                    .HasColumnName("CE_NO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CeNoce)
                    .HasColumnName("CE_Noce")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CePiece).HasColumnName("CE_Piece");

                entity.Property(e => e.CePrice).HasColumnName("CE_Price");

                entity.Property(e => e.CePriceTotal).HasColumnName("CE_PriceTotal");

                entity.Property(e => e.CeStatus).HasColumnName("CE_Status");
            });

            modelBuilder.Entity<TableProGrame>(entity =>
            {
                entity.HasKey(e => e.IdPrograme);

                entity.ToTable("Table_ProGrame");

                entity.Property(e => e.IdPrograme).HasColumnName("ID_Programe");

                entity.Property(e => e.PgDetail)
                    .HasColumnName("PG_Detail")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PgName)
                    .HasColumnName("PG_Name")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PgPic)
                    .HasColumnName("PG_Pic")
                    .HasColumnType("text");

                entity.Property(e => e.PgType).HasColumnName("PG_Type");

                entity.HasOne(d => d.PgTypeNavigation)
                    .WithMany(p => p.TableProGrame)
                    .HasForeignKey(d => d.PgType)
                    .HasConstraintName("FK_Table_ProGrame_Table_TypePG");
            });

            modelBuilder.Entity<TableProMoTion>(entity =>
            {
                entity.HasKey(e => e.IdProMo);

                entity.ToTable("Table_ProMoTion");

                entity.Property(e => e.IdProMo)
                    .HasColumnName("ID_ProMo")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProDetail)
                    .HasColumnName("Pro_Detail")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProName)
                    .HasColumnName("Pro_Name")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProPrice).HasColumnName("Pro_Price");
            });

            modelBuilder.Entity<TableSup>(entity =>
            {
                entity.HasKey(e => e.CesubAtno);

                entity.ToTable("Table_Sup");

                entity.Property(e => e.CesubAtno).HasColumnName("CESUB_ATNO");

                entity.Property(e => e.CeAtno).HasColumnName("CE_ATNO");

                entity.Property(e => e.CesubName)
                    .HasColumnName("CESUB_Name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CesubNo)
                    .HasColumnName("CESUB_NO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CesubStatus).HasColumnName("CESUB_Status");

                entity.HasOne(d => d.CeAtnoNavigation)
                    .WithMany(p => p.TableSup)
                    .HasForeignKey(d => d.CeAtno)
                    .HasConstraintName("FK_Table_Sup_Table_EQ");
            });

            modelBuilder.Entity<TableTitleName>(entity =>
            {
                entity.HasKey(e => e.IdTitleName);

                entity.ToTable("Table_TitleName");

                entity.Property(e => e.IdTitleName).HasColumnName("ID_TitleName");

                entity.Property(e => e.TitleName)
                    .HasColumnName("Title_Name")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableTrainner>(entity =>
            {
                entity.HasKey(e => e.IdTrain);

                entity.ToTable("Table_Trainner");

                entity.Property(e => e.IdTrain).HasColumnName("ID_Train");

                entity.Property(e => e.TrainDetail)
                    .HasColumnName("Train_Detail")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrainName)
                    .HasColumnName("Train_Name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrainPic)
                    .HasColumnName("Train_Pic")
                    .HasColumnType("text");

                entity.Property(e => e.TrainTell)
                    .HasColumnName("Train_Tell")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TrainTitle).HasColumnName("Train_Title");

                entity.HasOne(d => d.TrainTitleNavigation)
                    .WithMany(p => p.TableTrainner)
                    .HasForeignKey(d => d.TrainTitle)
                    .HasConstraintName("FK_Table_Trainner_Table_TitleName");
            });

            modelBuilder.Entity<TableTypePg>(entity =>
            {
                entity.HasKey(e => e.IdTypePg);

                entity.ToTable("Table_TypePG");

                entity.Property(e => e.IdTypePg).HasColumnName("ID_TypePG");

                entity.Property(e => e.TypePgName)
                    .HasColumnName("TypePG_Name")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableTypeUser>(entity =>
            {
                entity.HasKey(e => e.IdTypeUser);

                entity.ToTable("Table_TypeUser");

                entity.Property(e => e.IdTypeUser)
                    .HasColumnName("ID_TypeUser")
                    .ValueGeneratedNever();

                entity.Property(e => e.NameTypeUser)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TableUser>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.ToTable("Table_User");

                entity.Property(e => e.IdUser).HasColumnName("ID_User");

                entity.Property(e => e.IdCard)
                    .HasColumnName("ID_Card")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.TitleName).HasColumnName("Title_Name");

                entity.Property(e => e.UserBirthday)
                    .HasColumnName("User_Birthday")
                    .HasColumnType("date");

                entity.Property(e => e.UserHeight).HasColumnName("User_Height");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasColumnName("User_Name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPass)
                    .HasColumnName("User_Pass")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UserPic)
                    .HasColumnName("User_Pic")
                    .HasColumnType("text");

                entity.Property(e => e.UserTell)
                    .HasColumnName("User_Tell")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserType).HasColumnName("User_Type");

                entity.Property(e => e.UserWeight).HasColumnName("User_Weight");

                entity.HasOne(d => d.TitleNameNavigation)
                    .WithMany(p => p.TableUser)
                    .HasForeignKey(d => d.TitleName)
                    .HasConstraintName("FK_Table_User_Table_TitleName");

                entity.HasOne(d => d.UserTypeNavigation)
                    .WithMany(p => p.TableUser)
                    .HasForeignKey(d => d.UserType)
                    .HasConstraintName("FK_Table_User_Table_TypeUser");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}